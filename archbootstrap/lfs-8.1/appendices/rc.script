#!/bin/bash
########################################################################
# Begin rc
#
# Description : Main Run Level Control Script
#
# Authors     : Gerard Beekmans  - gerard@linuxfromscratch.org
#             : DJ Lucas - dj@linuxfromscratch.org
# Update      : Bruce Dubbs - bdubbs@linuxfromscratch.org
#
# Version     : LFS 7.0
#
########################################################################

. /lib/lsb/init-functions

print_error_msg()
{
   log_failure_msg
   # $i is set when called
   MSG=&quot;FAILURE:\n\nYou should not be reading this error message.\n\n&quot; 
   MSG=&quot;${MSG}It means that an unforeseen error took place in\n&quot;
   MSG=&quot;${MSG}${i},\n&quot;
   MSG=&quot;${MSG}which exited with a return value of ${error_value}.\n&quot;
  
   MSG=&quot;${MSG}If you&apos;re able to track this error down to a bug in one of\n&quot;
   MSG=&quot;${MSG}the files provided by the ${DISTRO_MINI} book,\n&quot;
   MSG=&quot;${MSG}please be so kind to inform us at ${DISTRO_CONTACT}.\n&quot;
   log_failure_msg &quot;${MSG}&quot;

   log_info_msg &quot;Press Enter to continue...&quot;
   wait_for_user
}

check_script_status()
{
   # $i is set when called
   if [ ! -f ${i} ]; then
      log_warning_msg &quot;${i} is not a valid symlink.&quot; 
      SCRIPT_STAT=&quot;1&quot;
   fi

   if [ ! -x ${i} ]; then
      log_warning_msg &quot;${i} is not executable, skipping.&quot;
      SCRIPT_STAT=&quot;1&quot;
   fi
}

run()
{
   if [ -z $interactive ]; then
      ${1} ${2}
      return $?
   fi

   while true; do
      read -p &quot;Run ${1} ${2} (Yes/no/continue)? &quot; -n 1 runit
      echo

      case ${runit} in
         c | C)
            interactive=&quot;&quot;
            ${i} ${2}
            ret=${?}
            break;
            ;;

         n | N)
            return 0
            ;;

         y | Y)
            ${i} ${2}
            ret=${?}
            break
            ;;
      esac
   done

   return $ret
}

# Read any local settings/overrides
[ -r /etc/sysconfig/rc.site ] &amp;&amp; source /etc/sysconfig/rc.site

DISTRO=${DISTRO:-&quot;Linux From Scratch&quot;}
DISTRO_CONTACT=${DISTRO_CONTACT:-&quot;lfs-dev@linuxfromscratch.org (Registration required)&quot;}
DISTRO_MINI=${DISTRO_MINI:-&quot;LFS&quot;}
IPROMPT=${IPROMPT:-&quot;no&quot;}

# These 3 signals will not cause our script to exit
trap &quot;&quot; INT QUIT TSTP

[ &quot;${1}&quot; != &quot;&quot; ] &amp;&amp; runlevel=${1}

if [ &quot;${runlevel}&quot; == &quot;&quot; ]; then
   echo &quot;Usage: ${0} &lt;runlevel&gt;&quot; &gt;&amp;2
   exit 1
fi

previous=${PREVLEVEL}
[ &quot;${previous}&quot; == &quot;&quot; ] &amp;&amp; previous=N

if [ ! -d /etc/rc.d/rc${runlevel}.d ]; then
   log_info_msg &quot;/etc/rc.d/rc${runlevel}.d does not exist.\n&quot; 
   exit 1
fi

if [ &quot;$runlevel&quot; == &quot;6&quot; -o &quot;$runlevel&quot; == &quot;0&quot; ]; then IPROMPT=&quot;no&quot;; fi

# Note: In ${LOGLEVEL:-7}, it is &apos;:&apos; &apos;dash&apos; &apos;7&apos;, not minus 7
if [ &quot;$runlevel&quot; == &quot;S&quot; ]; then 
   [ -r /etc/sysconfig/console ] &amp;&amp; source /etc/sysconfig/console 
   dmesg -n &quot;${LOGLEVEL:-7}&quot; 
fi

if [ &quot;${IPROMPT}&quot; == &quot;yes&quot; -a &quot;${runlevel}&quot; == &quot;S&quot; ]; then
   # The total length of the distro welcome string, without escape codes
   wlen=${wlen:-$(echo &quot;Welcome to ${DISTRO}&quot; | wc -c )}
   welcome_message=${welcome_message:-&quot;Welcome to ${INFO}${DISTRO}${NORMAL}&quot;}

   # The total length of the interactive string, without escape codes
   ilen=${ilen:-$(echo &quot;Press &apos;I&apos; to enter interactive startup&quot; | wc -c )}
   i_message=${i_message:-&quot;Press &apos;${FAILURE}I${NORMAL}&apos; to enter interactive startup&quot;}


   # dcol and icol are spaces before the message to center the message
   # on screen. itime is the amount of wait time for the user to press a key
   wcol=$(( ( ${COLUMNS} - ${wlen} ) / 2 ))
   icol=$(( ( ${COLUMNS} - ${ilen} ) / 2 ))
   itime=${itime:-&quot;3&quot;}

   echo -e &quot;\n\n&quot;
   echo -e &quot;\\033[${wcol}G${welcome_message}&quot;
   echo -e &quot;\\033[${icol}G${i_message}${NORMAL}&quot;
   echo &quot;&quot;
   read -t &quot;${itime}&quot; -n 1 interactive 2&gt;&amp;1 &gt; /dev/null
fi

# Make lower case
[ &quot;${interactive}&quot; == &quot;I&quot; ] &amp;&amp; interactive=&quot;i&quot;
[ &quot;${interactive}&quot; != &quot;i&quot; ] &amp;&amp; interactive=&quot;&quot;

# Read the state file if it exists from runlevel S
[ -r /var/run/interactive ] &amp;&amp; source /var/run/interactive

# Attempt to stop all services started by the previous runlevel,
# and killed in this runlevel
if [ &quot;${previous}&quot; != &quot;N&quot; ]; then
   for i in $(ls -v /etc/rc.d/rc${runlevel}.d/K* 2&gt; /dev/null)
   do
      check_script_status
      if [ &quot;${SCRIPT_STAT}&quot; == &quot;1&quot; ]; then
         SCRIPT_STAT=&quot;0&quot;
         continue
      fi

      suffix=${i#/etc/rc.d/rc$runlevel.d/K[0-9][0-9]}
      prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix
      sysinit_start=/etc/rc.d/rcS.d/S[0-9][0-9]$suffix

      if [ &quot;${runlevel}&quot; != &quot;0&quot; -a &quot;${runlevel}&quot; != &quot;6&quot; ]; then
         if [ ! -f ${prev_start} -a  ! -f ${sysinit_start} ]; then
            MSG=&quot;WARNING:\n\n${i} can&apos;t be &quot;
            MSG=&quot;${MSG}executed because it was not &quot;
            MSG=&quot;${MSG}not started in the previous &quot;
            MSG=&quot;${MSG}runlevel (${previous}).&quot;
            log_warning_msg &quot;$MSG&quot;
            continue
         fi
      fi

      run ${i} stop
      error_value=${?}

      if [ &quot;${error_value}&quot; != &quot;0&quot; ]; then print_error_msg; fi
   done
fi

if [ &quot;${previous}&quot; == &quot;N&quot; ]; then export IN_BOOT=1; fi

if [ &quot;$runlevel&quot; == &quot;6&quot; -a -n &quot;${FASTBOOT}&quot; ]; then
   touch /fastboot
fi


# Start all functions in this runlevel
for i in $( ls -v /etc/rc.d/rc${runlevel}.d/S* 2&gt; /dev/null)
do
   if [ &quot;${previous}&quot; != &quot;N&quot; ]; then
      suffix=${i#/etc/rc.d/rc$runlevel.d/S[0-9][0-9]}
      stop=/etc/rc.d/rc$runlevel.d/K[0-9][0-9]$suffix
      prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix

      [ -f ${prev_start} -a ! -f ${stop} ] &amp;&amp; continue
   fi

   check_script_status
      if [ &quot;${SCRIPT_STAT}&quot; == &quot;1&quot; ]; then
         SCRIPT_STAT=&quot;0&quot;
         continue
      fi

   case ${runlevel} in
      0|6)
         run ${i} stop
         ;;
      *)
         run ${i} start
         ;;
   esac

   error_value=${?}

   if [ &quot;${error_value}&quot; != &quot;0&quot; ]; then print_error_msg; fi
done

# Store interactive variable on switch from runlevel S and remove if not
if [ &quot;${runlevel}&quot; == &quot;S&quot; -a &quot;${interactive}&quot; == &quot;i&quot; ]; then
    echo &quot;interactive=\&quot;i\&quot;&quot; &gt; /var/run/interactive
else
    rm -f /var/run/interactive 2&gt; /dev/null
fi

# Copy the boot log on initial boot only
if [ &quot;${previous}&quot; == &quot;N&quot; -a  &quot;${runlevel}&quot; != &quot;S&quot; ]; then
   cat $BOOTLOG &gt;&gt; /var/log/boot.log
      
   # Mark the end of boot
   echo &quot;--------&quot; &gt;&gt; /var/log/boot.log
   
   # Remove the temporary file
   rm -f $BOOTLOG 2&gt; /dev/null
fi

# End rc
