diff --git a/src/sage/libs/pynac/pynac.pxd b/src/sage/libs/pynac/pynac.pxd
index d4afc4e..6d1fcac 100644
--- a/src/sage/libs/pynac/pynac.pxd
+++ b/src/sage/libs/pynac/pynac.pxd
@@ -481,22 +481,17 @@ cdef extern from "pynac_wrap.h":
     ctypedef GParamSet const_paramset_ref "const GiNaC::paramset&"
 
     ctypedef struct py_funcs_struct:
-        py_binomial(a, b)
-        py_binomial_int(int n, unsigned int k)
         py_gcd(a, b)
         py_lcm(a, b)
         py_real(a)
         py_imag(a)
         py_numer(a)
         py_denom(a)
-        py_conjugate(a)
         bint py_is_rational(a)
-        bint py_is_crational(a)
         bint py_is_real(a)
         bint py_is_integer(a)
         bint py_is_equal(a, b)
         bint py_is_even(a)
-        bint py_is_cinteger(a)
         bint py_is_prime(n)
         bint py_is_exact(x)
 
@@ -534,23 +529,14 @@ cdef extern from "pynac_wrap.h":
         py_asinh(x)
         py_acosh(x)
         py_atanh(x)
-        py_tgamma(x)
-        py_lgamma(x)
         py_isqrt(x)
         py_sqrt(x)
-        py_abs(x)
         py_mod(x, y)
         py_smod(x, y)
         py_irem(x, y)
-        py_iquo(x, y)
-        py_iquo2(x, y)
-        py_li(x, n, parent)
-        py_li2(x)
         py_psi(x)
         py_psi2(n, x)
 
-        int py_int_length(x) except -1
-
         py_eval_constant(unsigned serial, parent)
         py_eval_unsigned_infinity()
         py_eval_infinity()
@@ -583,8 +569,6 @@ cdef extern from "pynac_wrap.h":
         stdstring* py_latex_fderivative(unsigned id, params, args)
         paramset_to_PyTuple(const_paramset_ref s)
 
-        py_rational_power_parts(basis, exp)
-
     py_funcs_struct py_funcs "GiNaC::py_funcs"
 
 cdef extern from "pynac/order.h":
diff --git a/src/sage/libs/pynac/pynac.pyx b/src/sage/libs/pynac/pynac.pyx
index f303184..419cc47 100644
--- a/src/sage/libs/pynac/pynac.pyx
+++ b/src/sage/libs/pynac/pynac.pyx
@@ -2432,23 +2432,18 @@ def init_function_table():
     called before Pynac is used; otherwise, there will be segfaults.
     """
 
-    py_funcs.py_binomial_int = &py_binomial_int
-    py_funcs.py_binomial = &py_binomial
     py_funcs.py_gcd = &py_gcd
     py_funcs.py_lcm = &py_lcm
     py_funcs.py_real = &py_real
     py_funcs.py_imag = &py_imag
     py_funcs.py_numer = &py_numer
     py_funcs.py_denom = &py_denom
-    py_funcs.py_conjugate = &py_conjugate
 
     py_funcs.py_is_rational = &py_is_rational
-    py_funcs.py_is_crational = &py_is_crational
     py_funcs.py_is_real = &py_is_real
     py_funcs.py_is_integer = &py_is_integer
     py_funcs.py_is_equal = &py_is_equal
     py_funcs.py_is_even = &py_is_even
-    py_funcs.py_is_cinteger = &py_is_cinteger
     py_funcs.py_is_prime = &py_is_prime
     py_funcs.py_is_exact = &py_is_exact
 
@@ -2462,7 +2457,6 @@ def init_function_table():
     py_funcs.py_mpq_from_rational = &py_mpq_from_rational
 
     py_funcs.py_float = &py_float
-    py_funcs.py_RDF_from_double = &py_RDF_from_double
 
     py_funcs.py_factorial = &py_factorial
     py_funcs.py_doublefactorial = &py_doublefactorial
@@ -2486,23 +2480,14 @@ def init_function_table():
     py_funcs.py_asinh = &py_asinh
     py_funcs.py_acosh = &py_acosh
     py_funcs.py_atanh = &py_atanh
-    py_funcs.py_tgamma = &py_tgamma
-    py_funcs.py_lgamma = &py_lgamma
     py_funcs.py_isqrt = &py_isqrt
     py_funcs.py_sqrt = &py_sqrt
-    py_funcs.py_abs = &py_abs
     py_funcs.py_mod = &py_mod
     py_funcs.py_smod = &py_smod
     py_funcs.py_irem = &py_irem
-    py_funcs.py_iquo = &py_iquo
-    py_funcs.py_iquo2 = &py_iquo2
-    py_funcs.py_li = &py_li
-    py_funcs.py_li2 = &py_li2
     py_funcs.py_psi = &py_psi
     py_funcs.py_psi2 = &py_psi2
 
-    py_funcs.py_int_length = &py_int_length
-
     py_funcs.py_eval_constant = &py_eval_constant
     py_funcs.py_eval_unsigned_infinity = &py_eval_unsigned_infinity
     py_funcs.py_eval_infinity = &py_eval_infinity
@@ -2531,7 +2516,6 @@ def init_function_table():
     py_funcs.py_print_fderivative =  &py_print_fderivative
     py_funcs.py_latex_fderivative =  &py_latex_fderivative
     py_funcs.paramset_to_PyTuple = &paramset_to_PyTuple
-    py_funcs.py_rational_power_parts = &py_rational_power_parts
 
 init_function_table()
 init_pynac_I()

diff --git a/src/sage/functions/other.py b/src/sage/functions/other.py
index 81cd485..931cecc 100644
--- a/src/sage/functions/other.py
+++ b/src/sage/functions/other.py
@@ -688,7 +688,6 @@ class Function_gamma(GinacFunction):
             :meth:`sage.functions.other.gamma`
         """
         GinacFunction.__init__(self, 'gamma', latex_name=r"\Gamma",
-                               ginac_name='tgamma',
                                conversions={'mathematica':'Gamma',
                                             'maple':'GAMMA',
                                             'sympy':'gamma',
diff --git a/src/sage/libs/pynac/pynac.pxd b/src/sage/libs/pynac/pynac.pxd
index 1739067..d4afc4e 100644
--- a/src/sage/libs/pynac/pynac.pxd
+++ b/src/sage/libs/pynac/pynac.pxd
@@ -362,7 +362,7 @@ cdef extern from "pynac_wrap.h":
     GEx g_zeta2 "GiNaC::zeta" (GEx m, GEx s)            except + # alternating Euler sum
     GEx g_stieltjes "GiNaC::stieltjes" (GEx m)          except + # Stieltjes constants
     GEx g_zetaderiv "GiNaC::zetaderiv" (GEx n, GEx x)   except + # derivatives of Riemann's zeta function
-    GEx g_tgamma "GiNaC::tgamma" (GEx x)                except + # gamma function
+    GEx g_gamma "GiNaC::gamma" (GEx x)                  except + # gamma function
     GEx g_lgamma "GiNaC::lgamma" (GEx x)                except + # logarithm of gamma function
     GEx g_beta "GiNaC::beta" (GEx x, GEx y)             except + # beta function (tgamma(x)*tgamma(y)/tgamma(x+y))
     GEx g_psi "GiNaC::psi" (GEx x)                      except + # psi (digamma) function
diff --git a/src/sage/symbolic/expression.pyx b/src/sage/symbolic/expression.pyx
index dfb8751..52303d1 100644
--- a/src/sage/symbolic/expression.pyx
+++ b/src/sage/symbolic/expression.pyx
@@ -8917,7 +8917,7 @@ cdef class Expression(CommutativeRingElement):
         cdef GEx x
         sig_on()
         try:
-            x = g_hold_wrapper(g_tgamma, self._gobj, hold)
+            x = g_hold_wrapper(g_gamma, self._gobj, hold)
         finally:
             sig_off()
         return new_Expression_from_GEx(self._parent, x)
