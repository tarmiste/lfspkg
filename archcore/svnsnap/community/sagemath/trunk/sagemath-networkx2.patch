diff --git a/src/sage/graphs/base/graph_backends.pyx b/src/sage/graphs/base/graph_backends.pyx
index ff1d02900a..bad4a18539 100644
--- a/src/sage/graphs/base/graph_backends.pyx
+++ b/src/sage/graphs/base/graph_backends.pyx
@@ -800,9 +800,9 @@ class NetworkXGraphDeprecated(SageObject):
             sage: X.multiedges = True
             sage: G = X.mutate()
             sage: G.edges()
-            [(1, 2), (2, 3)]
+            MultiEdgeDataView([(1, 2), (2, 3)])
             sage: G.edges(data=True)
-            [(1, 2, {'weight': 7}), (2, 3, {4: {}, 5: {}, 6: {}, 7: {}})]
+            MultiEdgeDataView([(1, 2, {'weight': 7}), (2, 3, {4: {}, 5: {}, 6: {}, 7: {}})])
 
         """
         import networkx
@@ -868,11 +868,9 @@ class NetworkXDiGraphDeprecated(SageObject):
             sage: X.multiedges = True
             sage: G = X.mutate()
             sage: G.edges()
-            [(1, 2), (2, 1), (2, 3)]
+            OutMultiEdgeDataView([(1, 2), (2, 1), (2, 3)])
             sage: G.edges(data=True)
-            [(1, 2, {'weight': 7}),
-             (2, 1, {7: {}, 8: {}}),
-             (2, 3, {4: {}, 5: {}, 6: {}, 7: {}})]
+            OutMultiEdgeDataView([(1, 2, {'weight': 7}), (2, 1, {8: {}, 7: {}}), (2, 3, {4: {}, 5: {}, 6: {}, 7: {}})])
 
         """
         import networkx
@@ -1158,7 +1156,7 @@ class NetworkXGraphBackend(GenericGraphBackend):
         import networkx
         try:
             if self._nxg.is_multigraph():
-                for k,d in self._nxg.edge[u][v].iteritems():
+                for u0,v0,k,d in self._nxg.edges([u,v],True,keys=True):
                     if d.get('weight',None) == l:
                         self._nxg.remove_edge(u,v,k)
                         break
@@ -1227,7 +1225,7 @@ class NetworkXGraphBackend(GenericGraphBackend):
         """
         cdef dict E
         try:
-            E = self._nxg.edge[u][v]
+            E = self._nxg.edges[u,v,0]
         except KeyError:
             from networkx import NetworkXError
             raise NetworkXError("Edge (%s,%s) requested via get_edge_label does not exist."%(u,v))
@@ -1416,7 +1414,7 @@ class NetworkXGraphBackend(GenericGraphBackend):
             sage: G.iterator_nbrs(0)
             <dictionary-keyiterator object at ...>
         """
-        return self._nxg.neighbors_iter(v)
+        return self._nxg.neighbors(v)
 
     def iterator_in_nbrs(self, v):
         """
diff --git a/src/sage/graphs/digraph.py b/src/sage/graphs/digraph.py
index 003a8d6bcb..986137a9b0 100644
--- a/src/sage/graphs/digraph.py
+++ b/src/sage/graphs/digraph.py
@@ -755,7 +755,7 @@ class DiGraph(GenericGraph):
             self.allow_multiple_edges(multiedges,check=False)
             self.allow_loops(loops,check=False)
             self.add_vertices(data.nodes())
-            self.add_edges((u,v,r(l)) for u,v,l in data.edges_iter(data=True))
+            self.add_edges((u,v,r(l)) for u,v,l in data.edges(data=True))
         elif format == 'igraph':
             if not data.is_directed():
                 raise ValueError("A *directed* igraph graph was expected. To "+
@@ -2844,7 +2844,7 @@ class DiGraph(GenericGraph):
         Using the NetworkX implementation ::
 
             sage: D.topological_sort(implementation = "NetworkX")
-            [4, 5, 6, 9, 0, 1, 2, 3, 7, 8, 10]
+            [4, 5, 6, 9, 0, 3, 2, 7, 1, 8, 10]
 
         Using the NetworkX recursive implementation ::
 
@@ -2870,9 +2870,7 @@ class DiGraph(GenericGraph):
               sage: D = DiGraph({ 0:[1,2,3], 4:[2,5], 1:[8], 2:[7], 3:[7],
               ....:   5:[6,7], 7:[8], 6:[9], 8:[10], 9:[10] })
               sage: N = D.networkx_graph()
-              sage: networkx.topological_sort(N)
-              [4, 5, 6, 9, 0, 1, 2, 3, 7, 8, 10]
-              sage: networkx.topological_sort_recursive(N)
+              sage: list(networkx.topological_sort(N))
               [4, 5, 6, 9, 0, 3, 2, 7, 1, 8, 10]
 
         TESTS:
@@ -2895,10 +2893,7 @@ class DiGraph(GenericGraph):
 
         elif implementation == "NetworkX" or implementation == "recursive":
             import networkx
-            if implementation == "NetworkX":
-                S = networkx.topological_sort(self.networkx_graph(copy=False))
-            else:
-                S = networkx.topological_sort_recursive(self.networkx_graph(copy=False))
+            S = list(networkx.topological_sort(self.networkx_graph(copy=False)))
             if S is None:
                 raise TypeError('Digraph is not acyclic; there is no topological sort.')
             else:
diff --git a/src/sage/graphs/generators/basic.py b/src/sage/graphs/generators/basic.py
index 8777b95c4b..28ef7e48f2 100644
--- a/src/sage/graphs/generators/basic.py
+++ b/src/sage/graphs/generators/basic.py
@@ -437,7 +437,7 @@ def CompleteBipartiteGraph(n1, n2):
 
     Compare the plotting::
 
-        sage: n = networkx.complete_bipartite_graph(11,17)
+        sage: n = networkx.complete_bipartite_graph(11r,17r)
         sage: spring_med = Graph(n)
         sage: posdict_med = graphs.CompleteBipartiteGraph(11,17)
 
@@ -469,7 +469,7 @@ def CompleteBipartiteGraph(n1, n2):
         sage: g = []
         sage: j = []
         sage: for i in range(9):
-        ....:     spr = networkx.complete_bipartite_graph(i+1,4)
+        ....:     spr = networkx.complete_bipartite_graph(int(i+1),4r)
         ....:     k = Graph(spr)
         ....:     g.append(k)
         sage: for i in range(3):
diff --git a/src/sage/graphs/generators/families.py b/src/sage/graphs/generators/families.py
index 8f81333685..1540ec0dcc 100644
--- a/src/sage/graphs/generators/families.py
+++ b/src/sage/graphs/generators/families.py
@@ -197,7 +197,7 @@ def BalancedTree(r, h):
     gracefully::
 
         sage: graphs.BalancedTree(1, 10)
-        Balanced tree: Graph on 2 vertices
+        Balanced tree: Graph on 11 vertices
 
         sage: graphs.BalancedTree(-1, 10)
         Balanced tree: Graph on 1 vertex
@@ -208,9 +208,6 @@ def BalancedTree(r, h):
         sage: graphs.BalancedTree(3, 0)
         Balanced tree: Graph on 1 vertex
 
-        sage: graphs.BalancedTree(5, -2)
-        Balanced tree: Graph on 0 vertices
-
         sage: graphs.BalancedTree(-2,-2)
         Balanced tree: Graph on 0 vertices
     """
diff --git a/src/sage/graphs/graph.py b/src/sage/graphs/graph.py
index 3550f990ef..490813e619 100644
--- a/src/sage/graphs/graph.py
+++ b/src/sage/graphs/graph.py
@@ -108,7 +108,7 @@ examples are covered here.
    ::
 
        sage: import networkx
-       sage: K = networkx.complete_bipartite_graph(12,7)
+       sage: K = networkx.complete_bipartite_graph(12r,7r)
        sage: G = Graph(K)
        sage: G.degree()
        [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 12, 12, 12, 12, 12]
@@ -1199,7 +1199,7 @@ class Graph(GenericGraph):
             self.allow_loops(loops, check=False)
             self.allow_multiple_edges(multiedges, check=False)
             self.add_vertices(data.nodes())
-            self.add_edges((u,v,r(l)) for u,v,l in data.edges_iter(data=True))
+            self.add_edges((u,v,r(l)) for u,v,l in data.edges(data=True))
         elif format == 'igraph':
             if data.is_directed():
                 raise ValueError("An *undirected* igraph graph was expected. "+
@@ -4600,7 +4600,7 @@ class Graph(GenericGraph):
 
             sage: g = Graph([(0,1,0), (1,2,999), (2,3,-5)])
             sage: g.matching(use_edge_labels=True)
-            [(1, 2, 999)]
+            [(0, 1, 0), (2, 3, -5)]
             sage: g.matching(algorithm="LP", use_edge_labels=True)
             [(1, 2, 999)]
 
@@ -6288,7 +6288,7 @@ class Graph(GenericGraph):
         return networkx.number_of_cliques(self.networkx_graph(copy=False), vertices, cliques)
 
     @doc_index("Clique-related methods")
-    def cliques_get_max_clique_graph(self, name=''):
+    def cliques_get_max_clique_graph(self):
         """
         Returns a graph constructed with maximal cliques as vertices, and
         edges between maximal cliques with common members in the original
@@ -6317,7 +6317,7 @@ class Graph(GenericGraph):
             sage: (G.cliques_get_max_clique_graph()).show(figsize=[2,2])
         """
         import networkx
-        return Graph(networkx.make_max_clique_graph(self.networkx_graph(copy=False), name=name, create_using=networkx.MultiGraph()))
+        return Graph(networkx.make_max_clique_graph(self.networkx_graph(copy=False), create_using=networkx.MultiGraph()))
 
     @doc_index("Clique-related methods")
     def cliques_get_clique_bipartite(self, **kwds):
