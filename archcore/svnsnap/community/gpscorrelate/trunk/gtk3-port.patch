diff --git a/Makefile b/Makefile
index ef2cf74..9313f0d 100644
--- a/Makefile
+++ b/Makefile
@@ -11,10 +11,10 @@ GOBJS    = main-gui.o gui.o unixtime.o gpx-read.o correlate.o exif-gps.o
 CFLAGS   = -Wall -O2
 CFLAGSINC := $(shell pkg-config --cflags libxml-2.0 exiv2)
 # Add the gtk+ flags only when building the GUI
-gpscorrelate-gui: CFLAGSINC += $(shell pkg-config --cflags gtk+-2.0)
+gpscorrelate-gui: CFLAGSINC += $(shell pkg-config --cflags gtk+-3.0)
 LDFLAGS   = -Wall -O2
 LDFLAGSALL := $(shell pkg-config --libs libxml-2.0 exiv2) -lm
-LDFLAGSGUI := $(shell pkg-config --libs gtk+-2.0)
+LDFLAGSGUI := $(shell pkg-config --libs gtk+-3.0)
 
 # Put --nonet here to avoid downloading DTDs while building documentation
 XSLTFLAGS =
diff --git a/gui.c b/gui.c
index 652993d..4b46d80 100644
--- a/gui.c
+++ b/gui.c
@@ -99,7 +99,6 @@ GtkWidget *StripGPSButton;
 GtkWidget *PhotoListVBox;
 GtkWidget *PhotoListScroll;
 GtkWidget *PhotoList;
-GtkTooltips *tooltips;
 
 /* Enum and other stuff for the Photo list box. */
 enum
@@ -236,9 +235,6 @@ GtkWidget* CreateMatchWindow (void)
   /* Load the settings. */
   LoadSettings();
 
-  /* Get our tooltips ready. */
-  tooltips = gtk_tooltips_new ();
-
   /* Start with the window itself. */
   MatchWindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);
   char title[40];
@@ -275,14 +271,14 @@ GtkWidget* CreateMatchWindow (void)
   PhotoAddButton = gtk_button_new_with_mnemonic (_("Add..."));
   gtk_widget_show (PhotoAddButton);
   gtk_box_pack_start (GTK_BOX (AddPhotosVBox), PhotoAddButton, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, PhotoAddButton, _("Add photos to be correlated."), NULL);
+  gtk_widget_set_tooltip_text (PhotoAddButton, _("Add photos to be correlated."));
   g_signal_connect (G_OBJECT (PhotoAddButton), "clicked",
   		G_CALLBACK (AddPhotosButtonPress), NULL);
 
   PhotoRemoveButton = gtk_button_new_with_mnemonic (_("Remove"));
   gtk_widget_show (PhotoRemoveButton);
   gtk_box_pack_start (GTK_BOX (AddPhotosVBox), PhotoRemoveButton, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, PhotoRemoveButton, _("Remove selected photos from the list."), NULL);
+  gtk_widget_set_tooltip_text (PhotoRemoveButton, _("Remove selected photos from the list."));
   g_signal_connect (G_OBJECT (PhotoRemoveButton), "clicked",
   		G_CALLBACK (RemovePhotosButtonPress), NULL);
 
@@ -315,9 +311,9 @@ GtkWidget* CreateMatchWindow (void)
   SelectGPSButton = gtk_button_new_with_mnemonic (_("Choose..."));
   gtk_widget_show (SelectGPSButton);
   gtk_box_pack_start (GTK_BOX (GPSDataVBox), SelectGPSButton, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, SelectGPSButton,
+  gtk_widget_set_tooltip_text (SelectGPSButton,
 	_("Choose GPX file to read GPS data from. If the GPS data is not in the "
-	  "GPX format, use a converter like GPSBabel to convert it to GPX."), NULL);
+	  "GPX format, use a converter like GPSBabel to convert it to GPX."));
   g_signal_connect (G_OBJECT (SelectGPSButton), "clicked",
   		G_CALLBACK (SelectGPSButtonPress), NULL);
 
@@ -343,40 +339,40 @@ GtkWidget* CreateMatchWindow (void)
   InterpolateCheck = gtk_check_button_new_with_mnemonic (_("Interpolate"));
   gtk_widget_show (InterpolateCheck);
   gtk_box_pack_start (GTK_BOX (OptionsVBox), InterpolateCheck, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, InterpolateCheck,
+  gtk_widget_set_tooltip_text (InterpolateCheck,
 	_("Interpolate between points. If disabled, points will be rounded to "
-	  "the nearest recorded point."), NULL);
+	  "the nearest recorded point."));
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (InterpolateCheck), g_key_file_get_boolean(GUISettings, "default", "interpolate", NULL));
 
   NoWriteCheck = gtk_check_button_new_with_mnemonic (_("Don't write"));
   gtk_widget_show (NoWriteCheck);
   gtk_box_pack_start (GTK_BOX (OptionsVBox), NoWriteCheck, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, NoWriteCheck, _("Don't write EXIF data back to the photos."), NULL);
+  gtk_widget_set_tooltip_text (NoWriteCheck, _("Don't write EXIF data back to the photos."));
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (NoWriteCheck), g_key_file_get_boolean(GUISettings, "default", "dontwrite", NULL));
 
   NoMtimeCheck = gtk_check_button_new_with_mnemonic (_("Don't change mtime"));
   gtk_widget_show (NoMtimeCheck);
   gtk_box_pack_start (GTK_BOX (OptionsVBox), NoMtimeCheck, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, NoMtimeCheck,
-	_("Don't change file modification time of the photos."), NULL);
+  gtk_widget_set_tooltip_text (NoMtimeCheck,
+	_("Don't change file modification time of the photos."));
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (NoMtimeCheck), g_key_file_get_boolean(GUISettings, "default", "nochangemtime", NULL));
 
   BetweenSegmentsCheck = gtk_check_button_new_with_mnemonic (_("Between Segments"));
   gtk_widget_show (BetweenSegmentsCheck);
   gtk_box_pack_start (GTK_BOX (OptionsVBox), BetweenSegmentsCheck, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, BetweenSegmentsCheck,
+  gtk_widget_set_tooltip_text (BetweenSegmentsCheck,
 	_("Interpolate between track segments. Generally the data is segmented "
 	  "to show where data was available and not available, but you might "
-	  "still want to interpolate between segments."), NULL);
+	  "still want to interpolate between segments."));
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (BetweenSegmentsCheck), g_key_file_get_boolean(GUISettings, "default", "betweensegments", NULL));
 
   DegMinSecsCheck = gtk_check_button_new_with_mnemonic (_("Write DD MM SS.SS"));
   gtk_widget_show (DegMinSecsCheck);
   gtk_box_pack_start (GTK_BOX (OptionsVBox), DegMinSecsCheck, FALSE, FALSE, 0);
-  gtk_tooltips_set_tip (tooltips, DegMinSecsCheck,
+  gtk_widget_set_tooltip_text (DegMinSecsCheck,
 	_("Write the latitude and longitude values as DD MM SS.SS; this is "
 	  "the new default. The old behaviour was to write it as "
-	  "DD MM.MM, which will occur if you uncheck this box."), NULL);
+	  "DD MM.MM, which will occur if you uncheck this box."));
   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (DegMinSecsCheck), g_key_file_get_boolean(GUISettings, "default", "writeddmmss", NULL));
 
   OptionsTable = gtk_table_new (4, 2, FALSE);
@@ -416,10 +412,10 @@ GtkWidget* CreateMatchWindow (void)
   gtk_table_attach (GTK_TABLE (OptionsTable), GapTimeEntry, 1, 2, 0, 1,
                     (GtkAttachOptions) (0),
                     (GtkAttachOptions) (0), 0, 0);
-  gtk_tooltips_set_tip (tooltips, GapTimeEntry,
+  gtk_widget_set_tooltip_text (GapTimeEntry,
 	_("Maximum time \"away\" from a point that the photo will be matched, "
 	  "in seconds. If a photos time is outside this value from any point, "
-	  "it will not be matched."), NULL);
+	  "it will not be matched."));
   gtk_entry_set_text (GTK_ENTRY (GapTimeEntry), g_key_file_get_value(GUISettings, "default", "maxgap", NULL));
   gtk_entry_set_width_chars (GTK_ENTRY (GapTimeEntry), 7);
 
@@ -428,11 +424,11 @@ GtkWidget* CreateMatchWindow (void)
   gtk_table_attach (GTK_TABLE (OptionsTable), TimeZoneEntry, 1, 2, 1, 2,
                     (GtkAttachOptions) (0),
                     (GtkAttachOptions) (0), 0, 0);
-  gtk_tooltips_set_tip (tooltips, TimeZoneEntry,
+  gtk_widget_set_tooltip_text (TimeZoneEntry,
 	_("The timezone that the cameras time was set to when the photos were "
 	  "taken. For example, if a camera is set to AWST or +8:00 hours. "
 	  "Enter +8:00 here so that the correct adjustment to the photos time "
-	  "can be made. GPS data is always in UTC."), NULL);
+	  "can be made. GPS data is always in UTC."));
   gtk_entry_set_text (GTK_ENTRY (TimeZoneEntry), g_key_file_get_value(GUISettings, "default", "timezone", NULL));
   gtk_entry_set_width_chars (GTK_ENTRY (TimeZoneEntry), 7);
   
@@ -441,10 +437,10 @@ GtkWidget* CreateMatchWindow (void)
   gtk_table_attach (GTK_TABLE (OptionsTable), PhotoOffsetEntry, 1, 2, 2, 3,
                     (GtkAttachOptions) (0),
                     (GtkAttachOptions) (0), 0, 0);
-  gtk_tooltips_set_tip (tooltips, PhotoOffsetEntry,
+  gtk_widget_set_tooltip_text (PhotoOffsetEntry,
 	_("The number of seconds to add to the photo's time to make it match "
 	  "the GPS data. Calculate this with (GPS - Photo). "
-	  "Can be negative or positive."), NULL);
+	  "Can be negative or positive."));
   gtk_entry_set_text (GTK_ENTRY (PhotoOffsetEntry), g_key_file_get_value(GUISettings, "default", "photooffset", NULL));
   gtk_entry_set_width_chars (GTK_ENTRY (PhotoOffsetEntry), 7);
 
@@ -453,9 +449,9 @@ GtkWidget* CreateMatchWindow (void)
   gtk_table_attach (GTK_TABLE (OptionsTable), GPSDatumEntry, 1, 2, 4, 5,
                     (GtkAttachOptions) (0),
                     (GtkAttachOptions) (0), 0, 0);
-  gtk_tooltips_set_tip (tooltips, GPSDatumEntry,
+  gtk_widget_set_tooltip_text (GPSDatumEntry,
 	_("The datum used for the GPS data. This text here is recorded in the "
-	  "EXIF tags as the source datum. WGS-84 is very commonly used."), NULL);
+	  "EXIF tags as the source datum. WGS-84 is very commonly used."));
   gtk_entry_set_text (GTK_ENTRY (GPSDatumEntry), g_key_file_get_value(GUISettings, "default", "gpsdatum", NULL));
   gtk_entry_set_width_chars (GTK_ENTRY (GPSDatumEntry), 7);
 
@@ -477,9 +473,9 @@ GtkWidget* CreateMatchWindow (void)
   CorrelateButton = gtk_button_new_with_mnemonic (_("Correlate Photos"));
   gtk_widget_show (CorrelateButton);
   gtk_container_add (GTK_CONTAINER (CorrelateAlignment), CorrelateButton);
-  gtk_tooltips_set_tip (tooltips, CorrelateButton,
+  gtk_widget_set_tooltip_text (CorrelateButton,
 	_("Begin the correlation process, writing back into the photos' "
-	  "EXIF tags (unless Don't write is selected)."), NULL);
+	  "EXIF tags (unless Don't write is selected)."));
   g_signal_connect (G_OBJECT (CorrelateButton), "clicked",
   		G_CALLBACK (CorrelateButtonPress), NULL);
 
@@ -501,8 +497,8 @@ GtkWidget* CreateMatchWindow (void)
   StripGPSButton = gtk_button_new_with_mnemonic (_("Strip GPS tags"));
   gtk_widget_show (StripGPSButton);
   gtk_container_add (GTK_CONTAINER (OtherOptionsAlignment), StripGPSButton);
-  gtk_tooltips_set_tip (tooltips, StripGPSButton,
-	_("Strip GPS tags from the selected photos."), NULL);
+  gtk_widget_set_tooltip_text (StripGPSButton,
+	_("Strip GPS tags from the selected photos."));
   g_signal_connect (G_OBJECT (StripGPSButton), "clicked",
   		G_CALLBACK (StripGPSButtonPress), NULL);
 
@@ -642,7 +638,7 @@ gboolean DestroyWindow(GtkWidget *Widget,
 	free(GPSData);
 
 	/* Tell GTK that we're done. */
-	gtk_exit(0);
+	exit(0);
 
 	/* And return FALSE so that GTK knows we have not
 	 * vetoed the close. */
