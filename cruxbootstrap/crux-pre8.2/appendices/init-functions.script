#!/bin/sh
########################################################################
# 
# Begin /lib/lsb/init-funtions
#
# Description : Run Level Control Functions
#
# Authors     : Gerard Beekmans - gerard@linuxfromscratch.org
#             : DJ Lucas - dj@linuxfromscratch.org
# Update      : Bruce Dubbs - bdubbs@linuxfromscratch.org
#
# Version     : LFS 7.0
#
# Notes       : With code based on Matthias Benkmann&apos;s simpleinit-msb
#               http://winterdrache.de/linux/newboot/index.html
#
#               The file should be located in /lib/lsb
#
########################################################################

## Environmental setup
# Setup default values for environment
umask 022
export PATH=&quot;/bin:/usr/bin:/sbin:/usr/sbin&quot;

## Set color commands, used via echo
# Please consult `man console_codes for more information
# under the &quot;ECMA-48 Set Graphics Rendition&quot; section
#
# Warning: when switching from a 8bit to a 9bit font,
# the linux console will reinterpret the bold (1;) to
# the top 256 glyphs of the 9bit font.  This does
# not affect framebuffer consoles

NORMAL=&quot;\\033[0;39m&quot;         # Standard console grey
SUCCESS=&quot;\\033[1;32m&quot;        # Success is green
WARNING=&quot;\\033[1;33m&quot;        # Warnings are yellow
FAILURE=&quot;\\033[1;31m&quot;        # Failures are red
INFO=&quot;\\033[1;36m&quot;           # Information is light cyan
BRACKET=&quot;\\033[1;34m&quot;        # Brackets are blue

# Use a colored prefix
BMPREFIX=&quot;     &quot;
SUCCESS_PREFIX=&quot;${SUCCESS}  *  ${NORMAL}&quot;
FAILURE_PREFIX=&quot;${FAILURE}*****${NORMAL}&quot;
WARNING_PREFIX=&quot;${WARNING} *** ${NORMAL}&quot;
SKIP_PREFIX=&quot;${INFO}  S  ${NORMAL}&quot;

SUCCESS_SUFFIX=&quot;${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}&quot;
FAILURE_SUFFIX=&quot;${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}&quot;
WARNING_SUFFIX=&quot;${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}&quot;
SKIP_SUFFIX=&quot;${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}&quot;

BOOTLOG=/run/bootlog
KILLDELAY=3
SCRIPT_STAT=&quot;0&quot;

# Set any user specified environment variables e.g. HEADLESS
[ -r /etc/sysconfig/rc.site ]  &amp;&amp; . /etc/sysconfig/rc.site

## Screen Dimensions
# Find current screen size
if [ -z &quot;${COLUMNS}&quot; ]; then
   COLUMNS=$(stty size)
   COLUMNS=${COLUMNS##* }
fi

# When using remote connections, such as a serial port, stty size returns 0
if [ &quot;${COLUMNS}&quot; = &quot;0&quot; ]; then
   COLUMNS=80
fi

## Measurements for positioning result messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Set Cursor Position Commands, used via echo
SET_COL=&quot;\\033[${COL}G&quot;      # at the $COL char
SET_WCOL=&quot;\\033[${WCOL}G&quot;    # at the $WCOL char
CURS_UP=&quot;\\033[1A\\033[0G&quot;   # Up one line, at the 0&apos;th char
CURS_ZERO=&quot;\\033[0G&quot;

################################################################################
# start_daemon()                                                               #
# Usage: start_daemon [-f] [-n nicelevel] [-p pidfile] pathname [args...]      #
#                                                                              #
# Purpose: This runs the specified program as a daemon                         #
#                                                                              #
# Inputs: -f: (force) run the program even if it is already running.           #
#         -n nicelevel: specify a nice level. See &apos;man nice(1)&apos;.               #
#         -p pidfile: use the specified file to determine PIDs.                #
#         pathname: the complete path to the specified program                 #
#         args: additional arguments passed to the program (pathname)          #
#                                                                              #
# Return values (as defined by LSB exit codes):                                #
#       0 - program is running or service is OK                                #
#       1 - generic or unspecified error                                       #
#       2 - invalid or excessive argument(s)                                   #
#       5 - program is not installed                                           #
################################################################################
start_daemon()
{
    local force=&quot;&quot;
    local nice=&quot;0&quot;
    local pidfile=&quot;&quot;
    local pidlist=&quot;&quot;
    local retval=&quot;&quot;

    # Process arguments
    while true
    do
        case &quot;${1}&quot; in

            -f)
                force=&quot;1&quot;
                shift 1
                ;;

            -n)
                nice=&quot;${2}&quot;
                shift 2
                ;;

            -p)
                pidfile=&quot;${2}&quot;
                shift 2
                ;;

            -*)
                return 2
                ;;

            *)
                program=&quot;${1}&quot;
                break
                ;;
        esac
    done

    # Check for a valid program
    if [ ! -e &quot;${program}&quot; ]; then return 5; fi

    # Execute
    if [ -z &quot;${force}&quot; ]; then
        if [ -z &quot;${pidfile}&quot; ]; then
            # Determine the pid by discovery
            pidlist=`pidofproc &quot;${1}&quot;`
            retval=&quot;${?}&quot;
        else
            # The PID file contains the needed PIDs
            # Note that by LSB requirement, the path must be given to pidofproc,
            # however, it is not used by the current implementation or standard.
            pidlist=`pidofproc -p &quot;${pidfile}&quot; &quot;${1}&quot;`
            retval=&quot;${?}&quot;
        fi

        # Return a value ONLY 
        # It is the init script&apos;s (or distribution&apos;s functions) responsibilty
        # to log messages!
        case &quot;${retval}&quot; in

            0)
                # Program is already running correctly, this is a 
                # successful start.
                return 0
                ;;

            1)
                # Program is not running, but an invalid pid file exists
                # remove the pid file and continue
                rm -f &quot;${pidfile}&quot;
                ;;

            3)
                # Program is not running and no pidfile exists
                # do nothing here, let start_deamon continue.
                ;;

            *)
                # Others as returned by status values shall not be interpreted
                # and returned as an unspecified error.
                return 1
                ;;
        esac
    fi

    # Do the start!
    nice -n &quot;${nice}&quot; &quot;${@}&quot;
}

################################################################################
# killproc()                                                                   #
# Usage: killproc [-p pidfile] pathname [signal]                               #
#                                                                              #
# Purpose: Send control signals to running processes                           #
#                                                                              #
# Inputs: -p pidfile, uses the specified pidfile                               #
#         pathname, pathname to the specified program                          #
#         signal, send this signal to pathname                                 #
#                                                                              #
# Return values (as defined by LSB exit codes):                                #
#       0 - program (pathname) has stopped/is already stopped or a             #
#           running program has been sent specified signal and stopped         #
#           successfully                                                       #
#       1 - generic or unspecified error                                       #
#       2 - invalid or excessive argument(s)                                   #
#       5 - program is not installed                                           #
#       7 - program is not running and a signal was supplied                   #
################################################################################
killproc()
{
    local pidfile
    local program
    local prefix
    local progname
    local signal=&quot;-TERM&quot;
    local fallback=&quot;-KILL&quot;
    local nosig
    local pidlist
    local retval
    local pid
    local delay=&quot;30&quot;
    local piddead
    local dtime

    # Process arguments
    while true; do
        case &quot;${1}&quot; in
            -p)
                pidfile=&quot;${2}&quot;
                shift 2
                ;;
 
             *)
                 program=&quot;${1}&quot;
                 if [ -n &quot;${2}&quot; ]; then
                     signal=&quot;${2}&quot;
                     fallback=&quot;&quot;
                 else
                     nosig=1
                 fi

                 # Error on additional arguments
                 if [ -n &quot;${3}&quot; ]; then
                     return 2
                 else 
                     break
                 fi                 
                 ;;
        esac
    done

    # Check for a valid program
    if [ ! -e &quot;${program}&quot; ]; then return 5; fi

    # Check for a valid signal
    check_signal &quot;${signal}&quot;
    if [ &quot;${?}&quot; -ne &quot;0&quot; ]; then return 2; fi

    # Get a list of pids
    if [ -z &quot;${pidfile}&quot; ]; then
        # determine the pid by discovery
        pidlist=`pidofproc &quot;${1}&quot;`
        retval=&quot;${?}&quot;
    else
        # The PID file contains the needed PIDs
        # Note that by LSB requirement, the path must be given to pidofproc,
        # however, it is not used by the current implementation or standard.
        pidlist=`pidofproc -p &quot;${pidfile}&quot; &quot;${1}&quot;`
        retval=&quot;${?}&quot;
    fi

    # Return a value ONLY
    # It is the init script&apos;s (or distribution&apos;s functions) responsibilty
    # to log messages!
    case &quot;${retval}&quot; in

        0)
            # Program is running correctly
            # Do nothing here, let killproc continue.
            ;;

        1)
            # Program is not running, but an invalid pid file exists
            # Remove the pid file.
            rm -f &quot;${pidfile}&quot;

            # This is only a success if no signal was passed.
            if [ -n &quot;${nosig}&quot; ]; then
                return 0
            else
                return 7
            fi
            ;;

        3)
            # Program is not running and no pidfile exists
            # This is only a success if no signal was passed.
            if [ -n &quot;${nosig}&quot; ]; then
                return 0
            else
                return 7
            fi
            ;;

        *)
            # Others as returned by status values shall not be interpreted
            # and returned as an unspecified error.
            return 1
            ;;
    esac

    # Perform different actions for exit signals and control signals
    check_sig_type &quot;${signal}&quot;

    if [ &quot;${?}&quot; -eq &quot;0&quot; ]; then # Signal is used to terminate the program

        # Account for empty pidlist (pid file still exists and no 
        # signal was given)
        if [ &quot;${pidlist}&quot; != &quot;&quot; ]; then

            # Kill the list of pids
            for pid in ${pidlist}; do

                kill -0 &quot;${pid}&quot; 2&gt; /dev/null

                if [ &quot;${?}&quot; -ne &quot;0&quot; ]; then
                    # Process is dead, continue to next and assume all is well
                    continue
                else
                    kill &quot;${signal}&quot; &quot;${pid}&quot; 2&gt; /dev/null

                    # Wait up to ${delay}/10 seconds to for &quot;${pid}&quot; to 
                    # terminate in 10ths of a second

                    while [ &quot;${delay}&quot; -ne &quot;0&quot; ]; do
                        kill -0 &quot;${pid}&quot; 2&gt; /dev/null || piddead=&quot;1&quot;
                        if [ &quot;${piddead}&quot; = &quot;1&quot; ]; then break; fi
                        sleep 0.1
                        delay=&quot;$(( ${delay} - 1 ))&quot;
                    done

                    # If a fallback is set, and program is still running, then
                    # use the fallback
                    if [ -n &quot;${fallback}&quot; -a &quot;${piddead}&quot; != &quot;1&quot; ]; then
                        kill &quot;${fallback}&quot; &quot;${pid}&quot; 2&gt; /dev/null
                        sleep 1
                        # Check again, and fail if still running
                        kill -0 &quot;${pid}&quot; 2&gt; /dev/null &amp;&amp; return 1
                    fi
                fi
            done
        fi

        # Check for and remove stale PID files.
        if [ -z &quot;${pidfile}&quot; ]; then
            # Find the basename of $program
            prefix=`echo &quot;${program}&quot; | sed &apos;s/[^/]*$//&apos;`
            progname=`echo &quot;${program}&quot; | sed &quot;s@${prefix}@@&quot;`

            if [ -e &quot;/var/run/${progname}.pid&quot; ]; then
                rm -f &quot;/var/run/${progname}.pid&quot; 2&gt; /dev/null
            fi
        else
            if [ -e &quot;${pidfile}&quot; ]; then rm -f &quot;${pidfile}&quot; 2&gt; /dev/null; fi
        fi

    # For signals that do not expect a program to exit, simply
    # let kill do its job, and evaluate kill&apos;s return for value

    else # check_sig_type - signal is not used to terminate program
        for pid in ${pidlist}; do
            kill &quot;${signal}&quot; &quot;${pid}&quot;
            if [ &quot;${?}&quot; -ne &quot;0&quot; ]; then return 1; fi
        done
    fi
}

################################################################################
# pidofproc()                                                                  #
# Usage: pidofproc [-p pidfile] pathname                                       #
#                                                                              #
# Purpose: This function returns one or more pid(s) for a particular daemon    #
#                                                                              #
# Inputs: -p pidfile, use the specified pidfile instead of pidof               #
#         pathname, path to the specified program                              #
#                                                                              #
# Return values (as defined by LSB status codes):                              #
#       0 - Success (PIDs to stdout)                                           #
#       1 - Program is dead, PID file still exists (remaining PIDs output)     #
#       3 - Program is not running (no output)                                 #
################################################################################
pidofproc()
{
    local pidfile
    local program
    local prefix
    local progname
    local pidlist
    local lpids
    local exitstatus=&quot;0&quot;

    # Process arguments
    while true; do
        case &quot;${1}&quot; in

            -p)
                pidfile=&quot;${2}&quot;
                shift 2
                ;;

            *)
                program=&quot;${1}&quot;
                if [ -n &quot;${2}&quot; ]; then
                    # Too many arguments
                    # Since this is status, return unknown
                    return 4
                else
                    break
                fi
                ;;
        esac
    done

    # If a PID file is not specified, try and find one.
    if [ -z &quot;${pidfile}&quot; ]; then
        # Get the program&apos;s basename
        prefix=`echo &quot;${program}&quot; | sed &apos;s/[^/]*$//&apos;`

        if [ -z &quot;${prefix}&quot; ]; then 
           progname=&quot;${program}&quot;
        else
           progname=`echo &quot;${program}&quot; | sed &quot;s@${prefix}@@&quot;`
        fi

        # If a PID file exists with that name, assume that is it.
        if [ -e &quot;/var/run/${progname}.pid&quot; ]; then
            pidfile=&quot;/var/run/${progname}.pid&quot;
        fi
    fi

    # If a PID file is set and exists, use it.
    if [ -n &quot;${pidfile}&quot; -a -e &quot;${pidfile}&quot; ]; then

        # Use the value in the first line of the pidfile
        pidlist=`/bin/head -n1 &quot;${pidfile}&quot;`
        # This can optionally be written as &apos;sed 1q&apos; to repalce &apos;head -n1&apos;
        # should LFS move /bin/head to /usr/bin/head
    else
        # Use pidof
        pidlist=`pidof &quot;${program}&quot;`
    fi

    # Figure out if all listed PIDs are running.
    for pid in ${pidlist}; do
        kill -0 ${pid} 2&gt; /dev/null

        if [ &quot;${?}&quot; -eq &quot;0&quot; ]; then
            lpids=&quot;${lpids}${pid} &quot;
        else
            exitstatus=&quot;1&quot;
        fi
    done

    if [ -z &quot;${lpids}&quot; -a ! -f &quot;${pidfile}&quot; ]; then
        return 3
    else
        echo &quot;${lpids}&quot;
        return &quot;${exitstatus}&quot;
    fi
}

################################################################################
# statusproc()                                                                 #
# Usage: statusproc [-p pidfile] pathname                                      #
#                                                                              #
# Purpose: This function prints the status of a particular daemon to stdout    #
#                                                                              #
# Inputs: -p pidfile, use the specified pidfile instead of pidof               #
#         pathname, path to the specified program                              #
#                                                                              #
# Return values:                                                               #
#       0 - Status printed                                                     #
#       1 - Input error. The daemon to check was not specified.                #
################################################################################
statusproc()
{
   local pidfile
   local pidlist

   if [ &quot;${#}&quot; = &quot;0&quot; ]; then
      echo &quot;Usage: statusproc [-p pidfle] {program}&quot;
      exit 1
   fi

   # Process arguments
   while true; do
       case &quot;${1}&quot; in

           -p)
               pidfile=&quot;${2}&quot;
               shift 2
               ;;

           *)
               if [ -n &quot;${2}&quot; ]; then
                   echo &quot;Too many arguments&quot;
                   return 1
               else
                   break
               fi
               ;;
       esac
   done

   if [ -n &quot;${pidfile}&quot; ]; then
      pidlist=`pidofproc -p &quot;${pidfile}&quot; $@`
   else
      pidlist=`pidofproc $@`
   fi

   # Trim trailing blanks
   pidlist=`echo &quot;${pidlist}&quot; | sed -r &apos;s/ +$//&apos;`

   base=&quot;${1##*/}&quot;

   if [ -n &quot;${pidlist}&quot; ]; then
      /bin/echo -e &quot;${INFO}${base} is running with Process&quot; \
         &quot;ID(s) ${pidlist}.${NORMAL}&quot;
   else
      if [ -n &quot;${base}&quot; -a -e &quot;/var/run/${base}.pid&quot; ]; then
         /bin/echo -e &quot;${WARNING}${1} is not running but&quot; \
            &quot;/var/run/${base}.pid exists.${NORMAL}&quot;
      else
         if [ -n &quot;${pidfile}&quot; -a -e &quot;${pidfile}&quot; ]; then
            /bin/echo -e &quot;${WARNING}${1} is not running&quot; \
               &quot;but ${pidfile} exists.${NORMAL}&quot;
         else
            /bin/echo -e &quot;${INFO}${1} is not running.${NORMAL}&quot;
         fi
      fi
   fi
}

################################################################################
# timespec()                                                                   #
#                                                                              #
# Purpose: An internal utility function to format a timestamp                  #
#          a boot log file.  Sets the STAMP variable.                          #
#                                                                              #
# Return value: Not used                                                       #
################################################################################
timespec()
{
   STAMP=&quot;$(echo `date +&quot;%b %d %T %:z&quot;` `hostname`) &quot;
   return 0
}

################################################################################
# log_success_msg()                                                            #
# Usage: log_success_msg [&quot;message&quot;]                                           #
#                                                                              #
# Purpose: Print a successful status message to the screen and                 #
#          a boot log file.                                                    #
#                                                                              #
# Inputs: $@ - Message                                                         #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_success_msg()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}&quot;

    # Strip non-printable characters from log file
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`

    timespec
    /bin/echo -e &quot;${STAMP} ${logmessage} OK&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

log_success_msg2()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}&quot;

    echo &quot; OK&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

################################################################################
# log_failure_msg()                                                            #
# Usage: log_failure_msg [&quot;message&quot;]                                           #
#                                                                              #
# Purpose: Print a failure status message to the screen and                    #
#          a boot log file.                                                    #
#                                                                              #
# Inputs: $@ - Message                                                         #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_failure_msg()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}&quot;

    # Strip non-printable characters from log file

    timespec
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo -e &quot;${STAMP} ${logmessage} FAIL&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

log_failure_msg2()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}&quot;

    echo &quot;FAIL&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

################################################################################
# log_warning_msg()                                                            #
# Usage: log_warning_msg [&quot;message&quot;]                                           #
#                                                                              #
# Purpose: Print a warning status message to the screen and                    #
#          a boot log file.                                                    #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_warning_msg()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${WARNING_PREFIX}${SET_COL}${WARNING_SUFFIX}&quot;

    # Strip non-printable characters from log file
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    timespec
    /bin/echo -e &quot;${STAMP} ${logmessage} WARN&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

log_skip_msg()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;
    /bin/echo -e &quot;${CURS_ZERO}${SKIP_PREFIX}${SET_COL}${SKIP_SUFFIX}&quot;

    # Strip non-printable characters from log file
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo &quot;SKIP&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

################################################################################
# log_info_msg()                                                               #
# Usage: log_info_msg message                                                  #
#                                                                              #
# Purpose: Print an information message to the screen and                      #
#          a boot log file.  Does not print a trailing newline character.      #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
log_info_msg()
{
    /bin/echo -n -e &quot;${BMPREFIX}${@}&quot;

    # Strip non-printable characters from log file
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    timespec
    /bin/echo -n -e &quot;${STAMP} ${logmessage}&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

log_info_msg2()
{
    /bin/echo -n -e &quot;${@}&quot;

    # Strip non-printable characters from log file
    logmessage=`echo &quot;${@}&quot; | sed &apos;s/\\\033[^a-zA-Z]*.//g&apos;`
    /bin/echo -n -e &quot;${logmessage}&quot; &gt;&gt; ${BOOTLOG}
    
    return 0
}

################################################################################
# evaluate_retval()                                                            #
# Usage: Evaluate a return value and print success or failyure as appropriate  #
#                                                                              #
# Purpose: Convenience function to terminate an info message                   #
#                                                                              #
# Return values: Not used                                                      #
################################################################################
evaluate_retval()
{
   local error_value=&quot;${?}&quot;

   if [ ${error_value} = 0 ]; then
      log_success_msg2
   else
      log_failure_msg2
   fi
}

################################################################################
# check_signal()                                                               #
# Usage: check_signal [ -{signal} | {signal} ]                                 #
#                                                                              #
# Purpose: Check for a valid signal.  This is not defined by any LSB draft,    #
#          however, it is required to check the signals to determine if the    #
#          signals chosen are invalid arguments to the other functions.        #
#                                                                              #
# Inputs: Accepts a single string value in the form or -{signal} or {signal}   #
#                                                                              #
# Return values:                                                               #
#       0 - Success (signal is valid                                           #
#       1 - Signal is not valid                                                #
################################################################################
check_signal()
{
    local valsig

    # Add error handling for invalid signals
    valsig=&quot;-ALRM -HUP -INT -KILL -PIPE -POLL -PROF -TERM -USR1 -USR2&quot;
    valsig=&quot;${valsig} -VTALRM -STKFLT -PWR -WINCH -CHLD -URG -TSTP -TTIN&quot;
    valsig=&quot;${valsig} -TTOU -STOP -CONT -ABRT -FPE -ILL -QUIT -SEGV -TRAP&quot;
    valsig=&quot;${valsig} -SYS -EMT -BUS -XCPU -XFSZ -0 -1 -2 -3 -4 -5 -6 -8 -9&quot;
    valsig=&quot;${valsig} -11 -13 -14 -15&quot;

    echo &quot;${valsig}&quot; | grep -- &quot; ${1} &quot; &gt; /dev/null

    if [ &quot;${?}&quot; -eq &quot;0&quot; ]; then
        return 0
    else
        return 1
    fi
}

################################################################################
# check_sig_type()                                                             #
# Usage: check_signal [ -{signal} | {signal} ]                                 #
#                                                                              #
# Purpose: Check if signal is a program termination signal or a control signal #
#          This is not defined by any LSB draft, however, it is required to    #
#          check the signals to determine if they are intended to end a        #
#          program or simply to control it.                                    #
#                                                                              #
# Inputs: Accepts a single string value in the form or -{signal} or {signal}   #
#                                                                              #
# Return values:                                                               #
#       0 - Signal is used for program termination                             #
#       1 - Signal is used for program control                                 #
################################################################################
check_sig_type()
{
    local valsig

    # The list of termination signals (limited to generally used items)
    valsig=&quot;-ALRM -INT -KILL -TERM -PWR -STOP -ABRT -QUIT -2 -3 -6 -9 -14 -15&quot;

    echo &quot;${valsig}&quot; | grep -- &quot; ${1} &quot; &gt; /dev/null

    if [ &quot;${?}&quot; -eq &quot;0&quot; ]; then
        return 0
    else
        return 1
    fi
}

################################################################################
# wait_for_user()                                                              #
#                                                                              #
# Purpose: Wait for the user to respond if not a headless system               #
#                                                                              #
################################################################################
wait_for_user()
{
   # Wait for the user by default
   [ &quot;${HEADLESS=0}&quot; = &quot;0&quot; ] &amp;&amp; read ENTER
   return 0
}

################################################################################
# is_true()                                                                    #
#                                                                              #
# Purpose: Utility to test if a variable is true | yes | 1                     #
#                                                                              #
################################################################################
is_true()
{
   [ &quot;$1&quot; = &quot;1&quot; ] || [ &quot;$1&quot; = &quot;yes&quot; ] || [ &quot;$1&quot; = &quot;true&quot; ] ||  [ &quot;$1&quot; = &quot;y&quot; ] ||
   [ &quot;$1&quot; = &quot;t&quot; ]
}

# End /lib/lsb/init-functions
